{ pkgs, lib, config, ... }:

with lib;

let
  cfg = config.homelab.podman.networking;
in
{
  options.homelab.podman.networking = {
    enable = mkEnableOption "Podman compose networking setup";
    
    hostName = mkOption {
      type = types.str;
      description = "The hostname to use for network and service naming";
    };
  };

  config = mkIf cfg.enable {
    # Networks
    systemd.services."podman-network-${cfg.hostName}_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f ${cfg.hostName}_default";
      };
      script = ''
        podman network inspect ${cfg.hostName}_default || podman network create ${cfg.hostName}_default
      '';
      partOf = [ "podman-compose-${cfg.hostName}-root.target" ];
      wantedBy = [ "podman-compose-${cfg.hostName}-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-${cfg.hostName}-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };

    # Ensure directory exists
    systemd.tmpfiles.rules = [
      "d /mnt/arrakis/wg 0755 1000 1000 -"
    ];
  };
}